package com.example.researchmonitoring.exception;

import jakarta.validation.ConstraintViolationException;
import org.springframework.dao.DataIntegrityViolationException;       // üëà –∏–º–ø–æ—Ä—Ç
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<?> badRequest(MethodArgumentNotValidException ex) {
        var msg = ex.getFieldErrors().stream()
                .map(e -> e.getField() + ": " + e.getDefaultMessage())
                .toList();
        return ResponseEntity.badRequest().body(msg);
    }

    @ExceptionHandler(ConstraintViolationException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public Map<String,String> validation(ConstraintViolationException ex) {
        return Map.of("error", ex.getMessage());
    }

    @ExceptionHandler(BadCredentialsException.class)
    @ResponseStatus(HttpStatus.UNAUTHORIZED)
    public Map<String,String> creds(BadCredentialsException ex) {
        return Map.of("error", ex.getMessage());
    }

    // --- –î–æ–±–∞–≤–ª—è–µ–º —Å—é–¥–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    @ExceptionHandler(DataIntegrityViolationException.class)
    public ResponseEntity<Map<String,String>> duplicate(DataIntegrityViolationException ex) {
        // –í —Ç–µ–ª–µ –æ—Ç–¥–∞—ë–º –Ω–∞—à –∫–ª—é—á "error" —Å –ø–æ–Ω—è—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        var body = Map.of("error", "Username already exists");
        // –û—Ç–¥–∞—ë–º –∫–æ–¥ 409 Conflict
        return ResponseEntity
                .status(HttpStatus.CONFLICT)
                .body(body);
    }

    @ExceptionHandler
    @ResponseStatus(HttpStatus.NOT_FOUND)
    public Map<String,String> notFound(RuntimeException ex) {
        return Map.of("error", ex.getMessage());
    }
}
